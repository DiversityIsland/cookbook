const API_BASE_URL = '/api/v1';
let currentDishId = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    currentDishId = urlParams.get('id');
    
    if (!currentDishId) {
        window.location.href = '/';
        return;
    }
    
    loadDishDetails();
    loadRecipes();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –±–ª—é–¥–∞
async function loadDishDetails() {
    try {
        const response = await fetch(`${API_BASE_URL}/dishes/${currentDishId}`);
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥–∞');
        }
        
        const dish = await response.json();
        displayDishDetails(dish);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        document.getElementById('dish-details').innerHTML = 
            '<div class="alert alert-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥–∞. <a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É</a></div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –±–ª—é–¥–∞
function displayDishDetails(dish) {
    const container = document.getElementById('dish-details');
    
    container.innerHTML = `
        <div class="dish-header">
            <div class="dish-header-content">
                <div class="dish-image">
                    üçΩÔ∏è
                </div>
                <div class="dish-info">
                    <h2>${escapeHtml(dish.name)}</h2>
                    <div class="description">${escapeHtml(dish.description)}</div>
                    <div class="dish-meta">
                        <div class="meta-item">üìù –†–µ—Ü–µ–ø—Ç–æ–≤: ${dish.recipesCount}</div>
                        <div class="meta-item">üìÖ –°–æ–∑–¥–∞–Ω–æ: ${formatDate(dish.createdAt)}</div>
                    </div>
                    <div class="dish-actions">
                        <button class="btn btn-danger btn-small" onclick="deleteDish()">–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±–ª—é–¥–∞
async function loadRecipes() {
    try {
        const response = await fetch(`${API_BASE_URL}/recipes/dish/${currentDishId}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤');
        
        const recipes = await response.json();
        displayRecipes(recipes);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        document.getElementById('recipes-list').innerHTML = 
            '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤
function displayRecipes(recipes) {
    const container = document.getElementById('recipes-list');
    
    if (recipes.length === 0) {
        container.innerHTML = '<div class="empty-state">–†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç!</div>';
        return;
    }
    
    container.innerHTML = recipes.map(recipe => `
        <div class="recipe-card">
            <h4>${escapeHtml(recipe.name)}</h4>
            <div class="recipe-meta">
                <span>‚è±Ô∏è ${formatDuration(recipe.cookingTime)}</span>
                <span>üë• ${recipe.servings} –ø–æ—Ä—Ü–∏–π</span>
                <span>ü•ï ${recipe.ingredientsCount} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤</span>
                <span>üìã ${recipe.stepsCount} —à–∞–≥–æ–≤</span>
            </div>
        </div>
    `).join('');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
function showCreateRecipeModal() {
    document.getElementById('createRecipeModal').classList.add('show');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
function closeCreateRecipeModal() {
    document.getElementById('createRecipeModal').classList.remove('show');
    document.getElementById('createRecipeForm').reset();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
async function handleCreateRecipe(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const cookingTimeMinutes = parseInt(formData.get('cookingTime'));
    
    const data = {
        name: formData.get('name'),
        description: formData.get('description'),
        cookingTime: `PT${cookingTimeMinutes}M`, // ISO 8601 Duration format
        servings: parseInt(formData.get('servings'))
    };
    
    try {
        const response = await fetch(`${API_BASE_URL}/recipes/dish/${currentDishId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞');
        
        closeCreateRecipeModal();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏ –±–ª—é–¥–∞
        await loadRecipes();
        await loadDishDetails();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞
async function deleteDish() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –±–ª—é–¥–æ? –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/dishes/${currentDishId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞');
        
        // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.href = '/';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatDuration(duration) {
    // Duration –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "PT45M")
    const match = duration.match(/PT(\d+H)?(\d+M)?(\d+S)?/);
    if (!match) return duration;
    
    const hours = match[1] ? parseInt(match[1]) : 0;
    const minutes = match[2] ? parseInt(match[2]) : 0;
    
    if (hours > 0) {
        return `${hours} —á ${minutes} –º–∏–Ω`;
    }
    return `${minutes} –º–∏–Ω`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('createRecipeModal');
    if (event.target === modal) {
        closeCreateRecipeModal();
    }
}
